{"version":3,"sources":["pages/Fullscreen.module.css","comments/CommentsList.module.css","comments/CommentsItem.module.css","comments/NewComment.module.css","comments/CommentsItem.js","comments/NewComment.js","comments/CommentsList.js","comments/Comments.js","pages/Fullscreen.js"],"names":["module","exports","CommentsItem","props","className","classes","commentsItem","text","NewComment","history","useHistory","match","useRouteMatch","console","log","useHttp","sendCommentsData","sendRequest","error","data","status","inputRef","useRef","addedComment","useEffect","form","onSubmit","event","preventDefault","sendData","comments","current","value","quoteId","htmlFor","id","type","rows","ref","btn","CommentsList","useState","setForm","content","map","comment","length","noComments","addComments","statusCheck","style","textAlign","LoadingSpinner","onClick","Comments","fetchCommentsData","addedCommentHandler","useCallback","Fullscreen","getFilteredQuotes","params","useParams","loading","fullScreen","author","path","url","exact","to"],"mappings":"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","file":"static/js/3.8aa0df4c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"fullScreen\":\"Fullscreen_fullScreen__2MwZD\",\"btn\":\"Fullscreen_btn__1cKlr\",\"loading\":\"Fullscreen_loading__23EWd\",\"error\":\"Fullscreen_error__3yNiL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"CommentsList_comments__33y4u\",\"noComments\":\"CommentsList_noComments__3h5d3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"commentsItem\":\"CommentsItem_commentsItem__2SRtu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewComment_form__atN_P\",\"loading\":\"NewComment_loading__1BOnU\"};","import classes from './CommentsItem.module.css'\r\n\r\n\r\n\r\nconst CommentsItem =(props)=>{\r\n    return(\r\n      <div className={classes.commentsItem}>\r\n          <p>{props.text}</p>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default CommentsItem","import classes from './NewComment.module.css'\r\nimport { sendCommentsData } from '../api/api'\r\nimport {useRef,useEffect,Fragment} from 'react'\r\nimport useHttp from '../useHook/useHttp'\r\nimport {useHistory,useRouteMatch} from 'react-router'\r\nimport LoadingSpinner from '../UI/LoadingSpinner'\r\nimport { useCallback } from 'react/cjs/react.development'\r\n\r\nconst NewComment =(props)=>{\r\n    const history = useHistory()\r\n    const match = useRouteMatch()\r\n    console.log(match)\r\n    console.log(history)\r\n    const {sendRequest,data,error,status} = useHttp(sendCommentsData)\r\n    const inputRef = useRef()\r\n    const submitHandler=(event)=>{\r\n        event.preventDefault()\r\n        const sendData={\r\n            comments:inputRef.current.value,\r\n            quoteId:props.quoteId\r\n        }\r\n       sendRequest(sendData)\r\n    }\r\n\r\n    const {addedComment} = props\r\n    useEffect(()=>{\r\n        if(status === 'success' && !error)\r\n        addedComment()\r\n    },[status,error,addedComment])\r\n    \r\n   \r\n    return(\r\n        <Fragment>\r\n       <form className={classes.form} onSubmit={submitHandler}>\r\n           <label htmlFor='new-comment'>Your Comment</label>\r\n           <textarea id='new-comment' type='text' rows='5' ref={inputRef}/>\r\n           <div className={classes.btn}>\r\n               <button type='submit'>Add Comment</button>\r\n           </div>\r\n       </form>\r\n       </Fragment>\r\n    )\r\n}\r\n\r\nexport default NewComment","import classes from './CommentsList.module.css'\r\nimport CommentsItem from './CommentsItem'\r\nimport NewComment from './NewComment'\r\nimport { useState,Fragment} from 'react'\r\nimport LoadingSpinner from '../UI/LoadingSpinner'\r\n\r\n\r\nconst CommentsList = (props)=>{\r\n    \r\n   const [form,setForm ] = useState(false)\r\n   const formHandler =()=>{\r\n       setForm(true)\r\n   }\r\n     const {comments} =props\r\n   let content = comments.map(comment=>{\r\n       return <CommentsItem key={comment.comments} text={comment.comments}/>\r\n   })\r\n\r\n   if(comments.length<=0){\r\n       content = <div className={classes.noComments}>\r\n            No comments were added yet!\r\n       </div>\r\n   }\r\n    return(\r\n        <Fragment>\r\n        <div className={classes.comments}>\r\n       <div className={classes.addComments}>\r\n           <h3>User Comments</h3>\r\n           {props.statusCheck === true && <div style={{textAlign:'center'}}><LoadingSpinner/></div>}\r\n          {!form && <button type='button' onClick={formHandler}>Add Comments</button>} \r\n       </div>\r\n       </div> \r\n       {props.status === 'pending' && <div style={{textAlign:'center'}}><LoadingSpinner/></div>}\r\n       {form &&<NewComment quoteId={props.quoteId} addedComment={props.addedComment} status={props.status} /> }\r\n       {content}\r\n       </Fragment>\r\n    )\r\n}\r\n\r\nexport default CommentsList","import CommentsList from \"./CommentsList\"\r\nimport { fetchCommentsData } from \"../api/api\"\r\nimport {useEffect,useCallback,Fragment,useState} from 'react'\r\nimport useHttp from \"../useHook/useHttp\"\r\nimport LoadingSpinner from \"../UI/LoadingSpinner\"\r\n\r\nconst Comments =(props)=>{\r\n    const {sendRequest,data,error,status} =useHttp(fetchCommentsData)\r\n    \r\n    const {quoteId} =props\r\n    useEffect(()=>{\r\n            sendRequest(quoteId)\r\n    },[sendRequest,quoteId])\r\n\r\n    const addedCommentHandler =useCallback(()=>{\r\n        sendRequest(quoteId)\r\n    },[sendRequest,quoteId])\r\n  \r\n\r\n\r\n\r\n    \r\n    return(\r\n      <Fragment>\r\n    <CommentsList quoteId={props.quoteId} comments={data} addedComment={addedCommentHandler} status={status} />\r\n    </Fragment>\r\n    )\r\n}\r\n\r\nexport default Comments","import classes from './Fullscreen.module.css'\r\nimport {useEffect,Fragment,useState} from 'react'\r\nimport { getFilteredQuotes } from '../api/api'\r\nimport {useParams,Route,useRouteMatch,Link,useHistory} from 'react-router-dom'\r\nimport Comments from '../comments/Comments'\r\nimport useHttp from '../useHook/useHttp'\r\nimport LoadingSpinner from '../UI/LoadingSpinner'\r\n\r\nconst Fullscreen = (props)=>{\r\n    const {sendRequest,error,data,status} =useHttp(getFilteredQuotes)\r\n    const params =useParams()\r\n    const match = useRouteMatch()\r\n    const history = useHistory()\r\n    const {quoteId} = params\r\n    useEffect(()=>{\r\n            sendRequest(quoteId)\r\n    },[sendRequest])\r\n    console.log(quoteId)\r\n    console.log(data)\r\n    console.log(match)\r\n    if(status === 'pending'){\r\n     return <div className={classes.loading}>\r\n         <LoadingSpinner/>\r\n     </div>\r\n    }\r\n\r\n    if(status === 'error'){\r\n        return <div className={classes.error}>\r\n            {error}\r\n        </div>\r\n    }\r\n    if(!data.text){\r\n     return <div>No quotes found</div>\r\n    }\r\n    console.log(data)\r\n    console.log(status)\r\n    return(\r\n        <Fragment>\r\n            <div className={classes.fullScreen}> \r\n            <h3>{data.text}</h3>\r\n            <p>{data.author}</p>\r\n            </div>\r\n            <Route path={`${match.url}`} exact>\r\n            <Link to={`${match.url}/comments`}>\r\n            <div className={classes.btn}> \r\n            <button type='button'>Load comments</button>\r\n            </div>\r\n            </Link>\r\n            </Route>\r\n            <Route path={`${match.path}/comments`}>\r\n                <Comments quoteId={quoteId}/>\r\n            </Route>\r\n           </Fragment>\r\n    )\r\n}\r\n\r\nexport default Fullscreen"],"sourceRoot":""}