{"version":3,"sources":["pages/Quotes.module.css","pages/QuotesItem.module.css","pages/QuotesItem.js","pages/QuoteList.js","pages/Quotes.js"],"names":["module","exports","QuotesItem","props","currentLink","useHistory","location","pathname","className","classes","quotesitem","text","author","to","id","type","QuoteList","mapquotes","quotes","map","q","i","index","quote","sortedquotes","sort","a","b","result","buttonChange","console","log","content","Quotes","useHttp","fetchQuotesData","sendRequest","data","error","status","useState","setButtonChange","useEffect","history","loading","LoadingSpinner","length","noQuotes","onClick","replace","btn","prevst","push"],"mappings":"sHACAA,EAAOC,QAAU,CAAC,SAAW,yBAAyB,OAAS,uBAAuB,IAAM,oBAAoB,QAAU,wBAAwB,MAAQ,wB,mBCA1JD,EAAOC,QAAU,CAAC,WAAa,iC,kHC2BhBC,EArBG,SAACC,GACf,IACMC,EADUC,cACYC,SAASC,SACrC,OACI,cAAC,WAAD,UACG,qBAAIC,UAAWC,IAAQC,WAAvB,UACH,+BACI,6BAAKP,EAAMQ,OACX,4BAAIR,EAAMS,YAEd,cAAC,IAAD,CAAMC,GAAIT,EAAc,IAAKD,EAAMW,GAAnC,SACA,wBAAQC,KAAK,SAAb,qC,gBCuCOC,EApDG,SAACb,GACf,IAAMc,EAAYd,EAAMe,OAAOC,KAAI,SAACC,EAAGC,GACnC,MAAO,CAAEC,MAAOD,EAAGE,MAAOH,MAExBI,EAAeP,EAAUQ,MAAK,SAAUC,EAAGC,GAC7C,OAAIA,EAAEL,MAAQI,EAAEJ,MACP,EAELK,EAAEL,MAAQI,EAAEJ,OACN,EAEH,KAELM,EAASJ,EAAaL,KAAI,SAACI,GAC7B,OAAOpB,EAAMe,OAAOK,EAAMD,UAGxBnB,EAAM0B,eAURD,GATAJ,EAAeP,EAAUQ,MAAK,SAAUC,EAAGC,GACzC,OAAID,EAAEJ,MAAQK,EAAEL,MACP,EAELI,EAAEJ,MAAQK,EAAEL,OACN,EAEH,MAEaH,KAAI,SAACI,GACzB,OAAOpB,EAAMe,OAAOK,EAAMD,WAI9BQ,QAAQC,IAAId,GAGV,IAAIe,EAAUJ,EAAOT,KAAI,SAACI,GACxB,OACE,cAAC,EAAD,CAEEZ,KAAMY,EAAMZ,KACZC,OAAQW,EAAMX,OACdE,GAAIS,EAAMT,IAHLS,EAAMT,OAOrB,OACI,cAAC,WAAD,UACKkB,K,QCUEC,UArDA,SAAC9B,GACd,MAAwC+B,YAAQC,KAAzCC,EAAP,EAAOA,YAAYC,EAAnB,EAAmBA,KAAKC,EAAxB,EAAwBA,MAAMC,EAA9B,EAA8BA,OAC9B,EAAwCC,oBAAS,GAAjD,mBAAOX,EAAP,KAAqBY,EAArB,KACAC,qBAAU,WACNN,MACJ,CAACA,IAEHN,QAAQC,IAAIM,GACV,IAAMM,EAAUtC,cAKf,GAAc,YAAXkC,EACF,OAAO,qBAAK/B,UAAWC,IAAQmC,QAAxB,SACL,cAACC,EAAA,EAAD,MAGN,GAAc,UAAXN,EACD,OAAO,qBAAK/B,UAAWC,IAAQ6B,MAAxB,SACJA,IAIH,GAAmB,IAAhBD,EAAKS,QAA2B,YAAXP,EACtB,OACE,sBAAK/B,UAAWC,IAAQsC,SAAxB,UACA,iDACA,wBAAQhC,KAAK,SAASiC,QAlBH,WACrBL,EAAQM,QAAQ,eAiBd,4BAWF,OACA,cAAC,WAAD,UACI,0BAASzC,UAAWC,IAAQS,OAA5B,UACE,qBAAKV,UAAWC,IAAQyC,IAAxB,SACE,wBAAQF,QAXI,WACpBP,GAAgB,SAACU,GACf,OAAQA,KAEVR,EAAQS,KAAKT,EAAQrC,SAASC,SAAW,SAA5B,UAA0CsB,EAAe,OAAS,SAOvE,SACGA,EAAe,kBAAoB,qBAGxC,cAAC,EAAD,CAAWA,aAAcA,EAAcX,OAAQmB","file":"static/js/5.a8d7f246.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"noQuotes\":\"Quotes_noQuotes__2H4kC\",\"quotes\":\"Quotes_quotes__3EBKF\",\"btn\":\"Quotes_btn__19V_l\",\"loading\":\"Quotes_loading__3MI3t\",\"error\":\"Quotes_error__mmPw9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"quotesitem\":\"QuotesItem_quotesitem__2r1zI\"};","import classes from './QuotesItem.module.css'\r\nimport { Fragment} from 'react'\r\nimport {Link} from 'react-router-dom'\r\nimport {useHistory} from 'react-router'\r\n\r\n\r\n\r\nconst QuotesItem =(props)=>{\r\n    const history = useHistory()\r\n    const currentLink = history.location.pathname\r\n    return(\r\n        <Fragment>   \r\n           <ul className={classes.quotesitem}>\r\n        <li>\r\n            <h3>{props.text}</h3>\r\n            <p>{props.author}</p>\r\n        </li>\r\n        <Link to={currentLink + '/' +props.id}>\r\n        <button type='button' >\r\n            View Fullscreen\r\n        </button>\r\n        </Link>\r\n       </ul>\r\n        </Fragment>\r\n       \r\n    )\r\n}\r\n\r\nexport default QuotesItem","import QuotesItem from \"./QuotesItem\";\r\nimport { Fragment } from \"react\";\r\n\r\n\r\n\r\nconst QuoteList = (props)=>{\r\n    const mapquotes = props.quotes.map((q, i) => {\r\n        return { index: i, quote: q };\r\n      });\r\n      let sortedquotes = mapquotes.sort(function (a, b) {\r\n        if (b.index > a.index) {\r\n          return 1;\r\n        }\r\n        if (b.index < a.index) {\r\n          return -1;\r\n        }\r\n        return 0;\r\n      });\r\n      let result = sortedquotes.map((quote) => {\r\n        return props.quotes[quote.index];\r\n      });\r\n      \r\n      if (props.buttonChange) {\r\n        sortedquotes = mapquotes.sort(function (a, b) {\r\n          if (a.index > b.index) {\r\n            return 1;\r\n          }\r\n          if (a.index < b.index) {\r\n            return -1;\r\n          }\r\n          return 0;\r\n        });\r\n        result = sortedquotes.map((quote) => {\r\n          return props.quotes[quote.index];\r\n        });\r\n        \r\n      }\r\n      console.log(mapquotes);\r\n    \r\n      \r\n        let content = result.map((quote) => {\r\n          return (\r\n            <QuotesItem\r\n              key={quote.id}\r\n              text={quote.text}\r\n              author={quote.author}\r\n              id={quote.id}\r\n            />\r\n          );\r\n        });\r\n    return(\r\n        <Fragment>\r\n            {content}\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default QuoteList","import classes from \"./Quotes.module.css\";\r\nimport React, { useEffect, Fragment, useState } from \"react\";\r\nimport QuotesItem from \"./QuotesItem\";\r\nimport { useHistory } from \"react-router\";\r\nimport useHttp from \"../useHook/useHttp\";\r\nimport { fetchQuotesData } from \"../api/api\";\r\nimport QuoteList from \"./QuoteList\";\r\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\r\n\r\nconst Quotes = (props) => {\r\n  const {sendRequest,data,error,status} = useHttp(fetchQuotesData)\r\n  const [buttonChange, setButtonChange] = useState(false);\r\n  useEffect(()=>{\r\n      sendRequest()\r\n},[sendRequest])\r\n\r\nconsole.log(data)\r\n  const history = useHistory();\r\n  \r\n  const redirectHandler =()=>{\r\n    history.replace('/new-quote')\r\n   }\r\n   if(status === 'pending'){\r\n    return <div className={classes.loading}>\r\n      <LoadingSpinner/>\r\n      </div>\r\n  }\r\nif(status === 'error'){\r\n  return <div className={classes.error}>\r\n    {error}\r\n  </div>\r\n}\r\n  \r\n  if(data.length === 0 && status === 'success'){\r\n    return(\r\n      <div className={classes.noQuotes}>\r\n      <h1>No quotes found</h1>\r\n      <button type='button' onClick={redirectHandler}>Add a quote</button>\r\n    </div>\r\n    )\r\n  }\r\n  const changeHandler = () => {\r\n    setButtonChange((prevst) => {\r\n      return !prevst;\r\n    });\r\n    history.push(history.location.pathname + '?sort=' + `${buttonChange ? 'desc' : 'asc'}`)\r\n  };\r\n\r\n    return (\r\n    <Fragment>\r\n        <section className={classes.quotes}>\r\n          <div className={classes.btn}>\r\n            <button onClick={changeHandler}>\r\n              {buttonChange ? \"Sort Descending\" : \"Sort Acsending\"}\r\n            </button>\r\n          </div>\r\n          <QuoteList buttonChange={buttonChange} quotes={data}/>\r\n        </section>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Quotes;\r\n"],"sourceRoot":""}